import math

def reward_function(params):
    # Read input parameters
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    speed = params['speed']
    progress = params['progress']
    steering_angle = abs(params['steering_angle'])
    all_wheels_on_track = params['all_wheels_on_track']
    heading = abs(params['heading'])
    steps = params['steps']
    closest_waypoints = params['closest_waypoints']
    waypoints = params['waypoints']

    # Initialize reward
    reward = 1e-3  # default low reward for off track

    # Reward if all wheels are on track
    if all_wheels_on_track:
        reward += 1.0

        # Reward for distance from center line
        marker_1 = 0.1 * track_width
        marker_2 = 0.25 * track_width
        marker_3 = 0.5 * track_width

        if distance_from_center <= marker_1:
            reward += 1.0
        elif distance_from_center <= marker_2:
            reward += 0.5
        elif distance_from_center <= marker_3:
            reward += 0.1

        # Penalize for high steering angles to avoid zig-zag behavior
        if steering_angle > 15:
            reward *= 0.8
        elif steering_angle < 5:
            reward += 0.5  # Reward for smoother steering

        # Reward for maintaining a moderate speed
        SPEED_THRESHOLD_HIGH = 3.0
        SPEED_THRESHOLD_LOW = 1.0
        if SPEED_THRESHOLD_LOW < speed < SPEED_THRESHOLD_HIGH:
            reward += 1.0

        # Reward for making progress around the track
        REWARD_PER_STEP = 0.1
        if steps > 0:  # Prevent division by zero
            reward += REWARD_PER_STEP * (progress / steps)

        # Reward for following the waypoints
        next_waypoint = waypoints[closest_waypoints[1]]
        prev_waypoint = waypoints[closest_waypoints[0]]
        track_direction = math.atan2(next_waypoint[1] - prev_waypoint[1], next_waypoint[0] - prev_waypoint[0])
        track_direction = math.degrees(track_direction)

        direction_diff = abs(track_direction - heading)
        if direction_diff > 180:
            direction_diff = 360 - direction_diff

        if direction_diff < 10.0:
            reward += 0.5

    else:
        reward = 1e-3  # Heavy penalty if any wheels go off track

    return float(reward)
